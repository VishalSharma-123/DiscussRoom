from django.http import HttpResponse
from django.shortcuts import render, redirect
from django.http import HttpResponse
from django.db.models import Q
from .models import Room, Topic
from .forms import RoomForm
from django.contrib.auth.models import User
from django.contrib import messages
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required


#should be names as tempaltes/base
#icontains is case insensitive, contains is sensitive
#GET when data to retrieve from server, POST when data to be send to server
# triggering rooms and home page



def loginPage(request):
    if request.method == "POST":
        username = request.POST.get('username')
        password = request.POST.get('password')
        
        try:
            user = User.objects.get(username = username)
        
        except:
            messages.error(request, 'User does not exist')
        
        user = authenticate(request, username = username, password = password)          #either return error or return user object
        
        if user is not None:
            login(request, user)                            #add the session in database
            return redirect('home')
        
        else:
            messages.error(request, "Username or Password is incorrect.")
         
    context = {}
    return render(request, 'base/login_register.html', context)

def logoutUser(request):
    logout(request)                                     #deleting the token generated by the user
    return redirect('home')

def home(request):
    q = request.GET.get('q') if request.GET.get('q') != None else ''
    
    room = Room.objects.filter(
        Q(topic__name__icontains = q) |                     #get the name from the topic model
        Q(name__icontains = q) |                            #get the name of the Room model
        Q(host__username__icontains = q) |                  #host has model user, which has attribute username
        Q(description__icontains = q)
        )                 
    topics = Topic.objects.all()
    room_count = room.count()
    
    context = {'rooms': room, 'topics': topics, 'room_count':room_count}
    return render(request, 'base/home.html', context)             #rendering the html file fromt template

def rooms(request, pk):
    room_s = Room.objects.get(id = pk)
    context = {'room': room_s}
    return render(request, 'base/room.html',context)

@login_required(login_url = 'login')                            #perform the below function if condition met
def createRoom(request):
    form = RoomForm()
    
    if(request.method == "POST"):
        form = RoomForm(request.POST)
        if(form.is_valid()):
            form.save()
            return redirect('home')
    
    context = {'form': form}
    return render(request, 'base/room_form.html', context)

@login_required(login_url = 'login')                            #perform the below function if condition met
def updateRoom(request, pk):
    room = Room.objects.get(id = pk)
    form = RoomForm(instance = room)                #the form will be prefilled with instance room values

    if(request.user != room.host):
        return HttpResponse("You are not allowed here!!!")
    
    #after submitting the form
    if request.method == "POST":
        form = RoomForm(request.POST, instance = room)
        if form.is_valid:
            form.save()
            return redirect('home')
    
    context = {'form': form}
    return render(request, 'base/room_form.html', context)

@login_required(login_url = 'login')                            #perform the below function if condition met
def deleteRoom(request,pk):
    room = Room.objects.get(id = pk)
    if(request.user != room.host):
        return HttpResponse("You are not allowed here!!!")
    
    if request.method == "POST":
        room.delete()
        return redirect('home')
        
    return render(request, 'base/delete.html', {'obj':room})